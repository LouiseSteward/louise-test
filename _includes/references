{% comment %}Get the book metadata for this page{% endcomment %}
{% include metadata %}

{% comment %}Capture each bibliography entry as an li element{% endcomment %}
{% capture references-list %}

{% comment %}By default, we assume the bibliography is 
the whole of _data/references.yml{% endcomment %}
{% assign references = site.data.references %}

{% comment %}If a unit has been specified, only include the references
for that unit.{% endcomment %}
{% if include.unit %}
    {% assign references = site.data.references | where_exp: "x", "x.units contains include.unit" %}
{% endif %}

{% comment %}If we're outputting a translation,
get the translation bibliography{% endcomment %}
{% if is-translation %}
    {% assign references = site.data.[language].references %}
    {% if include.unit %}
        {% assign references = site.data.[language].references | where_exp: "x", "x.units contains include.unit" %}
    {% endif %}
{% endif %}

{% comment %}Jekyll 3.3 sorts case-sensitively, which we don't want. So:
create a map of terms to their slugified equivalents.{% endcomment %}
{% capture slug-map %}
    {% for entry in references %}
{{ entry.text | slugify }}^{{ entry.text }}|
    {% endfor %}
{% endcapture %}

{% comment %}Now split that into an array and sort by the slug{% endcomment %}
{% assign slug-map = slug-map | split:'|' | sort %}

{% comment %}Now loop through the sorted slug-map{% endcomment %}
{% for line in slug-map %}

{% comment %}Turn each mapping into a little array{% endcomment %}
{% assign map = line | split: "^" %}

    {% comment %}Loop through each entry in the original references list...{% endcomment %}
    {% for entry in references %}

        {% comment %}...and check if it maps to the slug we're on. If it does,
        pop the full, markdownified reference into an li element.
        We have to do funky remove: '<p>' | remove: '</p>' | strip_newlines
        because https://github.com/jekyll/jekyll/issues/2248. {% endcomment %}
        {% if map[1] == entry.text %}

            <li class="bibliography-entry">{{ entry.text | markdownify | remove: '<p>' | remove: '</p>' | strip_newlines }}</li>

        {% endif %}

    {% endfor %}

{% endfor %}

{% endcapture %}{% comment %}glossary li's captured!{% endcomment %}

{% comment %}Now that we've got the glossary, output the surrounding ul.
Remember no indentation. Indents in md render as a code block.{% endcomment %}
<ul class="bibliography{% if include.class %} {{ include.class }}{% endif %}">
{{ references-list | strip_newlines }}
</ul>
